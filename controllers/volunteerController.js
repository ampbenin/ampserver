const Volunteer = require("../models/volunteer");
const Mission = require("../models/mission");

// ‚ûï Cr√©er un volontaire
const createVolunteer = async (req, res, next) => {
  try {
    const { titre, nom, prenom, email, telephone, statut } = req.body;

    // üîπ Trouver la mission par son titre
    const mission = await Mission.findOne({ titre });
    if (!mission) {
      return res.status(404).json({ success: false, message: "Mission non trouv√©e" });
    }

    // üîπ Cr√©er le volontaire avec l'ObjectId d√©j√† pr√©sent
    const volunteer = await Volunteer.create({
      nom,
      prenom,
      email,
      telephone,
      statut,
      mission: mission._id,
    });

    res.status(201).json({ success: true, message: "Volontaire ajout√© avec succ√®s", volunteer });
  } catch (error) {
    if (error.code === 11000) {
      return res.status(400).json({ message: "Ce volontaire existe d√©j√† pour cette mission." });
    }
    next(error);
  }
};

// üì• R√©cup√©rer les volontaires pour une mission donn√©e
const fetchVolunteersForCertificate = async (req, res, next) => {
  try {
    const { titre, email } = req.body;

    // üîπ R√©cup√©rer l'ID mission depuis son titre
    const mission = await Mission.findOne({ titre });
    if (!mission) {
      return res.status(404).json({ success: false, message: "Mission non trouv√©e" });
    }

    // ‚úÖ Mission._id est d√©j√† un ObjectId, pas besoin de mongoose.Types.ObjectId()
    const filter = { mission: mission._id, statut: "Mission valid√©e" };
    if (email) filter.email = email;

    const volunteers = await Volunteer.find(filter);

    res.json({ success: true, volunteers });
  } catch (error) {
    next(error);
  }
};

// üìù G√©n√©rer les attestations (squelette)
const generateCertificate = async (req, res, next) => {
  try {
    const { volunteers } = req.body;

    // Ici on fera la g√©n√©ration du PDF + upload (ex: Cloudinary)
    // Pour l‚Äôinstant on simule juste :
    const generated = volunteers.length;

    res.json({ message: "Attestations g√©n√©r√©es", generated });
  } catch (error) {
    next(error);
  }
};

module.exports = {
  createVolunteer,
  fetchVolunteersForCertificate,
  generateCertificate,
};
